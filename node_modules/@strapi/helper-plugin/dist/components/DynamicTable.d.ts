import * as React from 'react';
import { BaseCheckboxProps, TableProps as DSTableProps } from '@strapi/design-system';
import { EmptyBodyTableProps } from './EmptyBodyTable';
interface TableProps<TRows extends {
    id: string;
}> extends Pick<EmptyBodyTableProps, 'action'>, Pick<DSTableProps, 'footer'> {
    children?: React.ReactNode;
    contentType: string;
    components?: {
        ConfirmDialogDeleteAll?: React.ElementType;
        ConfirmDialogDelete?: React.ElementType;
    };
    headers?: TableHeadProps['headers'];
    isLoading?: boolean;
    onConfirmDeleteAll?: (ids: Array<string | number>) => Promise<void>;
    onConfirmDelete?: (id: string | number) => Promise<void>;
    rows?: Array<TRows>;
    withBulkActions?: boolean;
    withMainAction?: boolean;
    renderBulkActionsBar?: (props: {
        selectedEntries: Array<string | number>;
        clearSelectedEntries: () => void;
    }) => React.ReactNode;
}
/**
 * @deprecated
 * This component will be replaced by packages/core/helper-plugin/src/components/Table
 * in the next major release.
 */
declare const Table: ({ action, children, contentType, components, footer, headers, isLoading, onConfirmDeleteAll, onConfirmDelete, rows, withBulkActions, withMainAction, renderBulkActionsBar, ...rest }: TableProps<{
    id: string;
}>) => import("react/jsx-runtime").JSX.Element;
interface Header {
    fieldSchema?: {
        type: string;
    };
    name: string;
    metadatas: {
        sortable: boolean;
        label: string;
        mainField?: {
            name: string;
        };
    };
}
export interface TableHeadProps {
    areAllEntriesSelected?: boolean;
    entriesToDelete?: Array<string | number>;
    headers?: Array<Header>;
    onSelectAll: BaseCheckboxProps['onChange'];
    withMainAction?: boolean;
    withBulkActions?: boolean;
}
export { Table as DynamicTable };

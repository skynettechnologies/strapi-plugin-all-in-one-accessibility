import * as React from 'react';
import { MessageDescriptor } from 'react-intl';
import { InputType } from '../types';
import type { Attribute, Schema } from '@strapi/types';
/**
 * TODO: All these types could be accurately inferred from
 * their usage in the content-manager when we move it back.
 */
interface CMEditViewDataManagerContext {
    addComponentToDynamicZone?: (keys: string[], componentLayoutData: Record<string, unknown>, allComponents: Record<string, unknown>, shouldCheckErrors?: boolean, position?: number) => void;
    addNonRepeatableComponentToField?: (keys: string[], componentLayoutData: Record<string, unknown>, allComponents: Record<string, unknown>) => void;
    addRepeatableComponentToField?: (keys: string[], componentLayoutData: Record<string, unknown>, allComponents: Record<string, unknown>, shouldCheckErrors?: boolean, position?: number) => void;
    allLayoutData: {
        components: Record<string, Schema.Component>;
        contentType?: Schema.CollectionType | Schema.SingleType;
    };
    createActionAllowedFields: string[];
    formErrors: Record<string, MessageDescriptor>;
    hasDraftAndPublish: boolean;
    initialData: Record<string, unknown>;
    isCreatingEntry: boolean;
    isSingleType: boolean;
    layout?: Schema.CollectionType | Schema.SingleType;
    modifiedData: Record<string, unknown>;
    moveComponentDown?: (dynamicZoneName: string, currentIndex: number) => void;
    moveComponentField?: (payload: {
        name: string;
        newIndex: number;
        currentIndex: number;
    }) => void;
    moveComponentUp?: (dynamicZoneName: string, currentIndex: number) => void;
    onChange?: <TAttribute extends Attribute.Any>(payload: {
        target: {
            name: string;
            type?: InputType;
            value: Attribute.GetValue<TAttribute>;
        };
    }, shouldSetInitialValue?: boolean) => void;
    onPublish?: () => Promise<unknown>;
    onUnpublish?: () => Promise<unknown>;
    readActionAllowedFields: string[];
    relationConnect?: (payload: {
        name: string;
        value: object;
        toOneRelation: boolean;
    }) => void;
    relationDisconnect?: (payload: {
        name: string;
        id: string;
    }) => void;
    relationLoad?: (payload: {
        target: {
            initialDataPath: string[];
            modifiedDataPath: string[];
            value: object;
            modifiedDataOnly: boolean;
        };
    }) => void;
    relationReorder?: (payload: {
        name: string;
        oldIndex: number;
        newIndex: number;
    }) => void;
    removeComponentFromDynamicZone?: (dynamicZoneName: string, index: number) => void;
    removeComponentFromField?: (key: string, uid: string) => void;
    removeRepeatableField?: (key: string, uid: string) => void;
    slug?: string;
    status?: string;
    upateActionAllowedFields: string[];
}
declare const ContentManagerEditViewDataManagerContext: React.Context<CMEditViewDataManagerContext>;
declare const useCMEditViewDataManager: () => CMEditViewDataManagerContext;
export { useCMEditViewDataManager, ContentManagerEditViewDataManagerContext };
